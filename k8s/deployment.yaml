---
apiVersion: v1
kind: Service
metadata:
  name: demo-wordpress
  labels:
    app: demo-wordpress
    owner: ludo
    role: demo
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: container-http
#  - name: https
#    port: 443
#    protocol: TCP
#    targetPort: container-https
  selector:
    app: demo-wordpress
  type: LoadBalancer
  #loadBalancerIP: 10.195.3.14
#---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: demo-wordpress-content-pvc
#  labels:
#    app: demo-wordpress
#    owner: ludo
#    role: demo
#spec:
#  accessModes:
#    - ReadWriteOnce
#  resources:
#  requests:
#    storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-wordpress
  labels:
    app: demo-wordpress
    owner: ludo
    role: demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-wordpress
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: demo-wordpress
        owner: ludo
        role: demo
    spec:
      containers:
      # Image from existing registry (Harbor)
      - image: harbor.haas-231.pez.pivotal.io/tbs-created/paas-wordpress:latest
        name: paas-wordpress
        ### Define container environment variable
        env:
        # Nginx / HTTPD listen port
        - name: PORT
          value: '8080'
        # Database Name
        - name: RDS_DB_NAME
          value: 'demo-wordpress'
        # SECRET : Database User
        - name: RDS_DB_USER
          valueFrom:
            secretKeyRef:
              name: demo-wordpress
              key: rds_db_user
        # SECRET : Database Password
        - name: RDS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: demo-wordpress
              key: rds_db_password
        # FQDN of database
        - name: RDS_HOSTNAME
          value: 'demo-wordpress-mariadb.default.svc.cluster.local'
        # MySQL/MariaDB port
        - name: RDS_PORT
          value: '3306'
        # SECRET : Authentication Unique Keys and Salts => Must be uniq
        - name: AUTH_KEY
          valueFrom:
            secretKeyRef:
              name: demo-wordpress
              key: auth_key
        # SECRET : Authentication Unique Keys and Salts => Must be uniq
        - name: SECURE_AUTH_KEY
          valueFrom:
            secretKeyRef:
              name: demo-wordpress
              key: secure_auth_key
        # SECRET : Authentication Unique Keys and Salts => Must be uniq
        - name: LOGGED_IN_KEY
          valueFrom:
            secretKeyRef:
              name: demo-wordpress
              key: logged_in_key
        # SECRET : Authentication Unique Keys and Salts => Must be uniq
        - name: NONCE_KEY
          valueFrom:
            secretKeyRef:
              name: demo-wordpress
              key: nonce_key
        # SECRET : Authentication Unique Keys and Salts => Must be uniq
        - name: AUTH_SALT
          valueFrom:
            secretKeyRef:
              name: demo-wordpress
              key: auth_salt
        # SECRET : Authentication Unique Keys and Salts => Must be uniq
        - name: SECURE_AUTH_SALT
          valueFrom:
            secretKeyRef:
              name: demo-wordpress
              key: secure_auth_salt
        # SECRET : Authentication Unique Keys and Salts => Must be uniq
        - name: LOGGED_IN_SALT
          valueFrom:
            secretKeyRef:
              name: demo-wordpress
              key: logged_in_salt
        # SECRET : Authentication Unique Keys and Salts => Must be uniq
        - name: NONCE_SALT
          valueFrom:
            secretKeyRef:
              name: demo-wordpress
              key: nonce_salt

        # Image Pulling Policy
        #   /!\ Always to avoid cache side effect during deployment
        #imagePullPolicy: IfNotPresent
        imagePullPolicy: Always
        resources: {}
        ports:
        - containerPort: 8080
          name: container-http
          protocol: TCP
#        - containerPort: 8443
#          name: container-https
#          protocol: TCP

#        # PVC
#        volumeMounts:
#        - name: demo-wordpress-content-pvc
#          mountPath: /workspace/src/wp-content

        # Probing / HealthCheck
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /wp-admin/install.php
            port: container-http
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /wp-login.php
            port: container-http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5

#        # Resources : useless in lab
#        resources:
#          requests:
#            cpu: 200m
#            memory: 384Mi
